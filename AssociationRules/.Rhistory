# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
FlightData <- read.csv("FlightDelays.csv")
# Chunk 3: pressure
summary(FlightData)
head(FlightData)
str(FlightData)
FlightData$Weather <- as.factor(FlightData$Weather)
FlightData$DAY_WEEK <- as.factor(FlightData$DAY_WEEK)
FlightData$Flight.Status <- as.factor(FlightData$Flight.Status)
# Chunk 4
FlightData$levels<-ifelse(FlightData$CRS_DEP_TIME>=600 & FlightData$CRS_DEP_TIME<=1200,"level1",
ifelse(FlightData$CRS_DEP_TIME>=1200 & FlightData$CRS_DEP_TIME<=1800,"level2",
ifelse(FlightData$CRS_DEP_TIME>=1800 & FlightData$CRS_DEP_TIME<=2100,"level3","level4")))
FlightData$levels <- as.factor(FlightData$levels)
#library(infotheo)
#FlightData$CRS_DEP_TIME <- discretize(FlightData$CRS_DEP_TIME, disc = 'equalwidth', nbins = 4)
#FlightData$CRS_DEP_TIME <- as.factor(FlightData$CRS_DEP_TIME)
#plot(Dept_time)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,min)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,max)
# Chunk 5
str(FlightData)
# Chunk 6
FlightData$CRS_DEP_TIME <- NULL
library(arules)
rules <- apriori(FlightData,parameter = list(sup = 0.2, conf = 0.6,target="rules"))
# Chunk 7
summary(rules)
inspect(rules)
# Chunk 8
rules.itemfilter2 <- as(subset(rules, subset = lhs %in%
"Flight.Status=0"),
"data.frame")
rules.itemfilter2
rules_Lift <- as(subset(rules, subset = rhs %in% "DEST=LGA" & lift > 1.01),
"data.frame")
rules_Lift
# Chunk 9
inspect(rules[is.redundant(rules)])
rules <- (rules[!is.redundant(rules)])
# Chunk 10
library(arulesviz)
plot(rules)
# Chunk 11
write(rules, file = "data.csv", sep = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
FlightData <- read.csv("FlightDelays.csv")
# Chunk 3: pressure
summary(FlightData)
head(FlightData)
str(FlightData)
FlightData$Weather <- as.factor(FlightData$Weather)
FlightData$DAY_WEEK <- as.factor(FlightData$DAY_WEEK)
FlightData$Flight.Status <- as.factor(FlightData$Flight.Status)
# Chunk 4
FlightData$levels<-ifelse(FlightData$CRS_DEP_TIME>=600 & FlightData$CRS_DEP_TIME<=1200,"level1",
ifelse(FlightData$CRS_DEP_TIME>=1200 & FlightData$CRS_DEP_TIME<=1800,"level2",
ifelse(FlightData$CRS_DEP_TIME>=1800 & FlightData$CRS_DEP_TIME<=2100,"level3","level4")))
FlightData$levels <- as.factor(FlightData$levels)
#library(infotheo)
#FlightData$CRS_DEP_TIME <- discretize(FlightData$CRS_DEP_TIME, disc = 'equalwidth', nbins = 4)
#FlightData$CRS_DEP_TIME <- as.factor(FlightData$CRS_DEP_TIME)
#plot(Dept_time)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,min)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,max)
# Chunk 5
str(FlightData)
# Chunk 6
FlightData$CRS_DEP_TIME <- NULL
library(arules)
rules <- apriori(FlightData,parameter = list(sup = 0.2, conf = 0.6,target="rules"))
# Chunk 7
summary(rules)
inspect(rules)
# Chunk 8
rules.itemfilter2 <- as(subset(rules, subset = lhs %in%
"Flight.Status=0"),
"data.frame")
rules.itemfilter2
rules_Lift <- as(subset(rules, subset = rhs %in% "DEST=LGA" & lift > 1.01),
"data.frame")
rules_Lift
# Chunk 9
inspect(rules[is.redundant(rules)])
rules <- (rules[!is.redundant(rules)])
# Chunk 10
install.packages('arulesviz')
library(arulesviz)
plot(rules)
# Chunk 11
write(rules, file = "data.csv", sep = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
FlightData <- read.csv("FlightDelays.csv")
# Chunk 3: pressure
summary(FlightData)
head(FlightData)
str(FlightData)
FlightData$Weather <- as.factor(FlightData$Weather)
FlightData$DAY_WEEK <- as.factor(FlightData$DAY_WEEK)
FlightData$Flight.Status <- as.factor(FlightData$Flight.Status)
# Chunk 4
FlightData$levels<-ifelse(FlightData$CRS_DEP_TIME>=600 & FlightData$CRS_DEP_TIME<=1200,"level1",
ifelse(FlightData$CRS_DEP_TIME>=1200 & FlightData$CRS_DEP_TIME<=1800,"level2",
ifelse(FlightData$CRS_DEP_TIME>=1800 & FlightData$CRS_DEP_TIME<=2100,"level3","level4")))
FlightData$levels <- as.factor(FlightData$levels)
#library(infotheo)
#FlightData$CRS_DEP_TIME <- discretize(FlightData$CRS_DEP_TIME, disc = 'equalwidth', nbins = 4)
#FlightData$CRS_DEP_TIME <- as.factor(FlightData$CRS_DEP_TIME)
#plot(Dept_time)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,min)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,max)
# Chunk 5
str(FlightData)
# Chunk 6
FlightData$CRS_DEP_TIME <- NULL
library(arules)
rules <- apriori(FlightData,parameter = list(sup = 0.2, conf = 0.6,target="rules"))
# Chunk 7
summary(rules)
inspect(rules)
# Chunk 8
rules.itemfilter2 <- as(subset(rules, subset = lhs %in%
"Flight.Status=0"),
"data.frame")
rules.itemfilter2
rules_Lift <- as(subset(rules, subset = rhs %in% "DEST=LGA" & lift > 1.01),
"data.frame")
rules_Lift
# Chunk 9
inspect(rules[is.redundant(rules)])
rules <- (rules[!is.redundant(rules)])
# Chunk 10
install.packages('arulesViz')
library(arulesviz)
plot(rules)
# Chunk 11
write(rules, file = "data.csv", sep = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
FlightData <- read.csv("FlightDelays.csv")
# Chunk 3: pressure
summary(FlightData)
head(FlightData)
str(FlightData)
FlightData$Weather <- as.factor(FlightData$Weather)
FlightData$DAY_WEEK <- as.factor(FlightData$DAY_WEEK)
FlightData$Flight.Status <- as.factor(FlightData$Flight.Status)
# Chunk 4
FlightData$levels<-ifelse(FlightData$CRS_DEP_TIME>=600 & FlightData$CRS_DEP_TIME<=1200,"level1",
ifelse(FlightData$CRS_DEP_TIME>=1200 & FlightData$CRS_DEP_TIME<=1800,"level2",
ifelse(FlightData$CRS_DEP_TIME>=1800 & FlightData$CRS_DEP_TIME<=2100,"level3","level4")))
FlightData$levels <- as.factor(FlightData$levels)
#library(infotheo)
#FlightData$CRS_DEP_TIME <- discretize(FlightData$CRS_DEP_TIME, disc = 'equalwidth', nbins = 4)
#FlightData$CRS_DEP_TIME <- as.factor(FlightData$CRS_DEP_TIME)
#plot(Dept_time)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,min)
#tapply(FlightData$CRS_DEP_TIME,Dept_Bin,max)
# Chunk 5
str(FlightData)
# Chunk 6
FlightData$CRS_DEP_TIME <- NULL
library(arules)
rules <- apriori(FlightData,parameter = list(sup = 0.2, conf = 0.6,target="rules"))
# Chunk 7
summary(rules)
inspect(rules)
# Chunk 8
rules.itemfilter2 <- as(subset(rules, subset = lhs %in%
"Flight.Status=0"),
"data.frame")
rules.itemfilter2
rules_Lift <- as(subset(rules, subset = rhs %in% "DEST=LGA" & lift > 1.01),
"data.frame")
rules_Lift
# Chunk 9
inspect(rules[is.redundant(rules)])
rules <- (rules[!is.redundant(rules)])
# Chunk 10
install.packages('arulesViz')
library(arulesViz)
plot(rules)
# Chunk 11
write(rules, file = "data.csv", sep = ",")
